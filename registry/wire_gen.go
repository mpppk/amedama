// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package registry

import (
	"github.com/mpppk/imagine/action"
	"github.com/mpppk/imagine/domain/repository"
	"github.com/mpppk/imagine/infra/repoimpl"
	"github.com/mpppk/imagine/usecase"
	"go.etcd.io/bbolt"
)

// Injectors from wire.go:

func NewBoltHandlerCreator(b *bbolt.DB) *action.HandlerCreator {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	usecaseAsset := usecase.NewAsset(asset, tag)
	usecaseTag := usecase.NewTag(tag)
	workSpace := repoimpl.NewBBoltWorkSpace(b)
	meta := repoimpl.NewBoltMeta(b)
	client := repository.NewClient(asset, tag, workSpace, meta)
	handlerCreator := action.NewHandlerCreator(usecaseAsset, usecaseTag, client, b)
	return handlerCreator
}

func InitializeAssetUseCase(b *bbolt.DB) *usecase.Asset {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	usecaseAsset := usecase.NewAsset(asset, tag)
	return usecaseAsset
}

func InitializeTagUseCase(b *bbolt.DB) *usecase.Tag {
	tag := repoimpl.NewBBoltTag(b)
	usecaseTag := usecase.NewTag(tag)
	return usecaseTag
}

func NewBoltClient(b *bbolt.DB) *repository.Client {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	workSpace := repoimpl.NewBBoltWorkSpace(b)
	meta := repoimpl.NewBoltMeta(b)
	client := repository.NewClient(asset, tag, workSpace, meta)
	return client
}

func NewBoltUseCases(b *bbolt.DB) *usecase.UseCases {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	workSpace := repoimpl.NewBBoltWorkSpace(b)
	meta := repoimpl.NewBoltMeta(b)
	useCases := usecase.New(asset, tag, workSpace, meta)
	return useCases
}
