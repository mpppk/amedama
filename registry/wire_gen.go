// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package registry

import (
	"github.com/mpppk/imagine/action"
	"github.com/mpppk/imagine/domain/repository"
	"github.com/mpppk/imagine/infra"
	"github.com/mpppk/imagine/infra/repoimpl"
	"github.com/mpppk/imagine/usecase/interactor"
	"go.etcd.io/bbolt"
)

// Injectors from wire.go:

func NewBoltHandlerCreator(b *bbolt.DB) *action.HandlerCreator {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	interactorAsset := interactor.NewAsset(asset, tag)
	interactorTag := interactor.NewTag(tag)
	workSpace := repoimpl.NewBBoltWorkSpace(b)
	meta := repoimpl.NewBoltMeta(b)
	client := repository.NewClient(asset, tag, workSpace, meta)
	handlerCreator := action.NewHandlerCreator(interactorAsset, interactorTag, client, b)
	return handlerCreator
}

func InitializeAssetUseCase(b *bbolt.DB) *interactor.Asset {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	interactorAsset := interactor.NewAsset(asset, tag)
	return interactorAsset
}

func InitializeTagUseCase(b *bbolt.DB) *interactor.Tag {
	tag := repoimpl.NewBBoltTag(b)
	interactorTag := interactor.NewTag(tag)
	return interactorTag
}

func NewBoltClient(b *bbolt.DB) *repository.Client {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	workSpace := repoimpl.NewBBoltWorkSpace(b)
	meta := repoimpl.NewBoltMeta(b)
	client := repository.NewClient(asset, tag, workSpace, meta)
	return client
}

func NewBoltUseCases(b *bbolt.DB) *interactor.UseCases {
	asset := repoimpl.NewBBoltAsset(b)
	tag := repoimpl.NewBBoltTag(b)
	workSpace := repoimpl.NewBBoltWorkSpace(b)
	meta := repoimpl.NewBoltMeta(b)
	useCases := interactor.New(asset, tag, workSpace, meta)
	return useCases
}

func NewBoltUseCasesWithDBPath(dbPath string) (*interactor.UseCases, error) {
	db, err := infra.NewBoltDB(dbPath)
	if err != nil {
		return nil, err
	}
	asset := repoimpl.NewBBoltAsset(db)
	tag := repoimpl.NewBBoltTag(db)
	workSpace := repoimpl.NewBBoltWorkSpace(db)
	meta := repoimpl.NewBoltMeta(db)
	useCases := interactor.New(asset, tag, workSpace, meta)
	return useCases, nil
}
